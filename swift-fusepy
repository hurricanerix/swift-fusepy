#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# The MIT License (MIT)
#
# Copyright (c) 2014 Richard Hawkins
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import os
import pyrax

from fuse import FUSE, Operations


__version__ = '0.0.1'


class SwiftFusePy(Operations):
    """
    FUSE file system to mount a Swift container.
    """

    def __init__(self, identity_type, credentials_file, container_name):
        """
        @param identity_type: type of identity to use.
        @type identity_type: string
        @param credentials_file: absolute path to the file containing the
                                 credentials required to auth with swift.
        @type credentials_file: string
        @param container_name: name of the container to be mounted.
        @type container_name: string
        """
        self.identity_type = identity_type
        self.credentials_file = credentials_file
        self.container_name = container_name
        self.container = None

    def _get_container(self, reauth=False):
        """
        Get the container to be mounted.

        @param reauth: if True, re-authenticate, otherwise returned the
                       previously retrieved container object.
        @type reauth: boolean
        """
        if not self.container or reauth:
            pyrax.set_setting("identity_type", self.identity_type)
            pyrax.set_setting('custom_user_agent',
                              'Swift-FusePy/{0}'.format(__version__))
            pyrax.set_credential_file(self.credentials_file)
            self.container = pyrax.cloudfiles.get_container(
                self.container_name)
        return self.container

    def getattr(self, path, fh=None):
        """
        http://man7.org/linux/man-pages/man2/stat.2.html
        """
        attr = {
            #'st_ctime': 1384464600.0,
            #'st_mtime': 1384464600.0,
            #'st_nlink': 40,
            'st_mode': 17405,
            'st_size': 1428  # size of file in bytes
            #'st_gid': 80,
            #'st_uid': 0,
            #'st_atime': 1391581273.0
        }
        return attr

    def readdir(self, path, fh):
        container = self._get_container()
        yield '.'
        yield '..'

        path = path.lstrip('/')
        for obj in container.get_objects():
            dirent = (obj.name, {
                'st_ctime': 1384464600.0,
                'st_mtime': 1384464600.0,
                'st_nlink': 40,
                'st_mode': 17405,
                'st_size': 1428,
                'st_gid': 80,
                'st_uid': 0,
                'st_atime': 1391579333.0}, 0)
            yield dirent


def main():
    parser = argparse.ArgumentParser(
        description='Mount a Swift container to your local file system')
    parser.add_argument('--credentials_file', default='~/.swift.creds',
                        help='credentials file for connecting to Swift')
    parser.add_argument('--fsname', default=None, help='file system name')
    parser.add_argument('--identity_type', default='rackspace',
                        help='should be either \'rackspace\' or \'keystone\'')
    parser.add_argument('container_name', help='container to mount')
    parser.add_argument('mount_point',
                        help='directory to mount the container to')

    args = parser.parse_args()
    args.credentials_file = os.path.expanduser(args.credentials_file)

    if not args.fsname:
        args.fsname = 'swift.{0}'.format(args.container_name)

    FUSE(SwiftFusePy(args.identity_type, args.credentials_file,
                     args.container_name),
         args.mount_point, foreground=True, fsname=args.fsname)


if __name__ == '__main__':
    main()
